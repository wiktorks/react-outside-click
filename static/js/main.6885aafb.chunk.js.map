{"version":3,"sources":["hoc/outsideClickHoc/style.module.css","components/SelectDropdown/SelectDropdown.module.css","containers/App/App.module.css","hoc/outsideClickHoc/outsideClickHOC.js","components/SelectDropdown/SelectDropdown.js","containers/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","outsideClickHOC","Dropdown","props","onStartListeningClickOutside","preventClick","state","waitingOnClickOutside","setState","wrapperClass","style","wrapper","coverClass","cover","onClickOutside","hidden","dropdownRef","current","click","React","createRef","className","this","onClick","display","width","ref","waitingOnClick","children","Component","SelectDropdown","forwardRef","useState","isDisplayed","toggleVisibility","dropdownStyle","styles","visible","event","console","log","target","title","App","HocComponent1","HocComponent2","HocComponent3","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kHACAA,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,OAAS,sBAAsB,QAAU,yB,gBCAxFD,EAAOC,QAAU,CAAC,kBAAkB,wCAAwC,MAAQ,8BAA8B,QAAU,kC,oBCA5HD,EAAOC,QAAU,CAAC,IAAM,mB,uLC4DTC,EA1DS,SAACC,GAAD,yDACpB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAUVC,6BAA+B,WACtB,EAAKC,aASN,EAAKA,cAAe,EARf,EAAKC,MAAMC,uBACZ,EAAKC,SAAS,CACVD,uBAAuB,EACvBE,aAAcC,IAAMC,QACpBC,WAAYF,IAAMG,SAjBf,EAyBnBC,eAAiB,WACb,EAAKT,cAAe,EACpB,EAAKG,SAAS,CACVD,uBAAuB,EACvBE,aAAc,KACdG,WAAYF,IAAMK,SACnB,kBAAM,EAAKC,YAAYC,QAAQC,YA7BlC,EAAKF,YAAcG,IAAMC,UAAU,MACnC,EAAKd,MAAQ,CACTC,uBAAuB,EACvBE,aAAc,KACdG,WAAYF,IAAMK,QAEtB,EAAKV,cAAe,EARL,EADC,qDAoChB,OACI,oCACI,yBACIgB,UAAWC,KAAKhB,MAAMM,WACtBW,QAASD,KAAKR,iBAElB,yBACIO,UAAWC,KAAKhB,MAAMG,aACtBC,MAAO,CAAEc,QAAS,eAAgBC,MAAO,OACzCF,QAASD,KAAKlB,8BAEd,kBAACF,EAAD,eACIwB,IAAKJ,KAAKN,YACVW,eAAgBL,KAAKhB,MAAMC,uBACvBe,KAAKnB,OACXmB,KAAKnB,MAAMyB,gBAnDT,GAA4BC,c,uBC0BrCC,EA1BQX,IAAMY,YAAW,SAAC5B,EAAOuB,GAAS,IAAD,EACZM,oBAAS,GADG,mBAC7CC,EAD6C,KAChCC,EADgC,KAUhDC,EAAgB,KAMpB,OAJGF,IACCE,EAAgBC,IAAOC,SAIvB,yBAAKhB,UAAWe,IAAO,mBAAoBb,QAdzB,SAACe,GACnBC,QAAQC,IAAIF,EAAMG,QACdtC,EAAMwB,gBACNO,GAAkBD,IAW6CP,IAAKA,GACpE,yBAAKL,UAAWe,IAAOM,OACnB,gDAEJ,uBAAGrB,UAAWc,GAAgBhC,EAAMyB,c,gBCCjCe,MApBf,WACE,IAAMC,EAAgB3C,EAAgB6B,GAChCe,EAAgB5C,EAAgB6B,GAChCgB,EAAgB7C,EAAgB6B,GACtC,OACE,yBAAKT,UAAWe,IAAOO,KACrB,kBAACC,EAAD,gOAGA,kBAACC,EAAD,icAIA,kBAACC,EAAD,oOCNcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzB,QAAQyB,MAAMA,EAAMC,c","file":"static/js/main.6885aafb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"cover\":\"style_cover__179ik\",\"hidden\":\"style_hidden__1SrRu\",\"wrapper\":\"style_wrapper__1mo69\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"select-dropdown\":\"SelectDropdown_select-dropdown__1mZSx\",\"title\":\"SelectDropdown_title__kTw0q\",\"visible\":\"SelectDropdown_visible__1bKHs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__34PpO\"};","import React, { Component } from 'react';\nimport style from './style.module.css';\n\nconst outsideClickHOC = (Dropdown) => class extends Component {\n    constructor(props) {\n        super(props);\n        this.dropdownRef = React.createRef(null)\n        this.state = {\n            waitingOnClickOutside: false,\n            wrapperClass: null,\n            coverClass: style.hidden\n        }\n        this.preventClick = false;\n    }\n\n    onStartListeningClickOutside = () => {\n        if (!this.preventClick) {\n            if (!this.state.waitingOnClickOutside) {\n                this.setState({\n                    waitingOnClickOutside: true,\n                    wrapperClass: style.wrapper,\n                    coverClass: style.cover\n                });\n            }\n        } else {\n            this.preventClick = false;\n        }\n    }\n\n    onClickOutside = () => {\n        this.preventClick = true;\n        this.setState({\n            waitingOnClickOutside: false,\n            wrapperClass: null,\n            coverClass: style.hidden\n        }, () => this.dropdownRef.current.click());\n    }\n\n    render() {\n        return (\n            <>\n                <div\n                    className={this.state.coverClass}\n                    onClick={this.onClickOutside}\n                ></div>\n                <div\n                    className={this.state.wrapperClass}\n                    style={{ display: \"inline-block\", width: '30%' }}\n                    onClick={this.onStartListeningClickOutside}\n                >\n                    <Dropdown\n                        ref={this.dropdownRef}\n                        waitingOnClick={this.state.waitingOnClickOutside}\n                        {...this.props}\n                    >{this.props.children}</Dropdown>\n                </div>\n            </>\n        );\n    }\n}\n\nexport default outsideClickHOC;\n\n\n// Stwórz HOCa outsideClickHOC, który bedzie działać np z customowymi\n// componentami typu dropdown lub select: \n\n// który będzie działać wg poniższych wytycznych:\n// - będzie do owrapowanego komponentu dodawać propsy oraz działanie:\n\n// działanie 1:\n// -- prop - onStartListeningClickOutside \n// --- jeśli ta funkcja zostanie wywołana dany komponent zyskuje z-index najwyższy na stronie\n// --- pod komponentem pojawia się półprzeźroczyste ciemne tło, w które można kliknąć zamykając komponent\n\n// działanie 2:\n// -- prop - waitingOnClickOutside\n// --- zwraca true/false jeśli została wywołana metoda onStartListeningClickOutside\n\n// działanie 3:\n// -- prop onClickOutside\n// --- jesli ta funkcja zostanie wywołana komponent wraca na swoje miejsce z odpowiednim z-index\n// --- znika półprzeźroczyste szare tło spod komponentu\n\n// - mentor \n// - czs na refactor\n// - czas na pisanie testów\n","import React, { useState } from 'react';\nimport styles from './SelectDropdown.module.css';\n\nconst SelectDropdown = React.forwardRef((props, ref) => {\n    const [isDisplayed, toggleVisibility] = useState(false);\n\n    const handleDisplay = (event) => {\n        console.log(event.target);\n        if(!props.waitingOnClick) {\n            toggleVisibility(!isDisplayed);\n        }\n    }\n\n    let dropdownStyle = null;\n\n    if(isDisplayed) {\n        dropdownStyle = styles.visible;\n    }\n\n    return (\n        <div className={styles['select-dropdown']} onClick={handleDisplay} ref={ref}>\n            <div className={styles.title}>\n                <h3>Select Dropdown</h3>\n            </div>\n            <p className={dropdownStyle}>{props.children}</p>\n        </div>\n    );\n});\n\nexport default SelectDropdown;","import React from 'react';\nimport outsideClickHOC from '../../hoc/outsideClickHoc/outsideClickHOC';\nimport SelectDropdown from '../../components/SelectDropdown/SelectDropdown';\nimport styles from './App.module.css';\n\nfunction App() {\n  const HocComponent1 = outsideClickHOC(SelectDropdown);\n  const HocComponent2 = outsideClickHOC(SelectDropdown);\n  const HocComponent3 = outsideClickHOC(SelectDropdown);\n  return (\n    <div className={styles.App}>\n      <HocComponent1>\n        Lorem ipsum dolor sit amet consectetur adipisicing elit. Inventore omnis sint rerum aliquid minima eos cum quaerat dignissimos ab. Consequatur sunt asperiores quas. Veniam eum iure quis, accusantium quia asperiores?\n      </HocComponent1>\n      <HocComponent2>\n        Lorem ipsum dolor sit amet consectetur adipisicing elit. Autem nesciunt earum iste, pariatur fugiat iusto nobis sit cum, ullam aliquid ipsam sequi distinctio laboriosam voluptas labore architecto quidem eum modi?\n        Quam facilis debitis necessitatibus modi natus quae consequuntur. Molestiae iusto eaque asperiores distinctio, maxime eum corporis iure a illum quod. Ex quod voluptatem repudiandae, corporis dolores dolorem. Itaque, impedit in.\n      </HocComponent2>\n      <HocComponent3>\n        Lorem ipsum, dolor sit amet consectetur adipisicing elit. Eaque accusantium, cum ab at quam impedit illum modi expedita repudiandae nemo, saepe nobis molestias nulla reprehenderit incidunt dignissimos illo natus iste?\n      </HocComponent3>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}